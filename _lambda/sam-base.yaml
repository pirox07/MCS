AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'MCS'
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionUri: swagger.yaml
      Variables:
        getSchedule: !Ref MCSgetSchedule
        setSchedule: !Ref MCSsetSchedule
  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: 'test'
      DomainName: 'My_Domain_Name_placeholder'
#      Stage: !Ref StageName
#      Stage: !Ref Prod
#      Stage: 'Prod'
      Stage: Prod
#      Stage: ApiGatewayApi.Prod"Stage"
#      Stage: !Ref ApiGatewayApi.StageName
      DependsOn:
        - ApiGatewayApi
  MCSgetSchedule:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      CodeUri: MCSgetSchedule
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: true
        Type: AllAtOnce
      Description: ''
      MemorySize: 128
      Timeout: 15
      Tracing: Active
      Role: 'role_arn_MCS-lambda'
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /getSchedule
            Method: GET
  MCSsetSchedule:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      CodeUri: MCSsetSchedule
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: true
        Type: AllAtOnce
      Description: ''
      MemorySize: 128
      Timeout: 15
      Tracing: Active
      Role: 'role_arn_MCS-lambda'
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /setSchedule
            Method: GET
  MCSdisableRule:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      CodeUri: MCSdisableRule
      Description: ''
      MemorySize: 128
      Timeout: 3
      Tracing: Active
      Role: 'role_arn_MCS-lambda'
  MCSenableRule:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      CodeUri: MCSenableRule
      Description: ''
      MemorySize: 128
      Timeout: 3
      Tracing: Active
      Role: 'role_arn_MCS-lambda'
  MCSFirestCall:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      CodeUri: MCSFirestCall
      Description: ''
      MemorySize: 128
      Timeout: 3
      Tracing: Active
      Role: 'role_arn_MCS-lambda'
      Environment:
        Variables:
          CONTACT_REGION: 'contact_region_placeholder'
          DST_PHONE_NUMBER: 'dst_phone_number_placeholder'
          SRC_PHONE_NUMBER: 'src_phone_number_placeholder'
          CONTACT_FLOW_ID: 'contact_flow_id_placeholder'
          INSTANCE_ID: 'instance_id_placeholder'
  CallTimeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: 'call_time'
      ScheduleExpression: 'cron(00 00 * * ? *)'
      State: 'ENABLED'
      Targets:
        - Arn : !GetAtt
            - MCSFirestCall
            - Arn
          Id : !Ref MCSFirestCall
  EnableCallTimeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: 'enable_call_time'
      ScheduleExpression: 'cron(00 00 * * ? *)'
      State: 'DISABLED'
      Targets:
        - Arn : !GetAtt
            - MCSenableRule
            - Arn
          Id : !Ref MCSenableRule
#  iam_MCS-lambda:
#    Type: AWS::IAM::Role
#    Properties:
#        AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: lambda.amazonaws.com
#            Action: "sts:AssumeRole"
#    policies:
#      -
#        PolicyName: "MCS_access-cron_for_lambda"
#        PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              -
#                Effect: "Allow"
#                Action: "events:*"
#                Resource: "*"
#              -
#                Effect: "Allow"
#                Action: "iam:PassRole"
#                Resource: "arn:aws:iam::*:role/AWS_Events_Invoke_Targets"
#              -
#                Effect: "Allow"
#                Action": [
#                  "logs:CreateLogGroup",
#                  "logs:CreateLogStream",
#                  "logs:PutLogEvents"]
#                Resource: "*"
