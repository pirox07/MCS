swagger: '2.0'
info:
  version: 0.0.1
  title: MCS
  description: MCS
basePath: /
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: True
    validateRequestParameters: True
  params-only:
    validateRequestBody: False
    validateRequestParameters: True
paths:
  /MCSgetSchedule:
    x-amazon-apigateway-any-method:
      produces:
      - application/json
      responses:
        200:
          description: 200 response
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri: arn:aws:apigateway:region_placeholder:lambda:path/2015-03-31/functions/arn:aws:lambda:region_placeholder:account_placeholder:function:${stageVariables.getSchedule}:live/invocations
        passthroughBehavior: when_no_match
        httpMethod: get
        type: aws_proxy
    options:
      tags:
      - 'CORS'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: ''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /MCSsetSchedule:
    x-amazon-apigateway-any-method:
      x-amazon-apigateway-request-validator: 'params-only'
      parameters:
      produces:
      - application/json
      responses:
        200:
          description: 200 response
        403:
          description: 403 response
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri: arn:aws:apigateway:region_placeholder:lambda:path/2015-03-31/functions/arn:aws:lambda:region_placeholder:account_placeholder:function:${stageVariables.setSchedule}:live/invocations
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: aws_proxy
    options:
      tags:
      - 'CORS'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: ''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
definitions:
  Empty:
    type: 'object'
    description: 'This is a default empty schema model'
    $schema: 'http://json-schema.org/draft-04/schema#'
    title: 'Empty Schema'
